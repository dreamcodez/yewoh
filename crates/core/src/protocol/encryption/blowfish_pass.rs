use byteorder::{BigEndian as Endian, ByteOrder};
use once_cell::sync::OnceCell;

use super::blowfish::Blowfish;

const BLOCK_SIZE: usize = 8;
const SUPER_BLOCK_SIZE: usize = 21036;

const BLOWFISH_KEYS: [[u8; 6]; 25] = [
    [0x91, 0x3c, 0x2b, 0x0f, 0x44, 0xc6],
    [0x0c, 0x96, 0xd2, 0x40, 0x93, 0x21],
    [0xf2, 0x12, 0xa5, 0xaa, 0xda, 0xe9],
    [0x9a, 0xd4, 0xf7, 0x14, 0x97, 0xd0],
    [0xfc, 0xc9, 0xc7, 0xd6, 0xa8, 0xa3],
    [0x7b, 0x67, 0x36, 0x9b, 0x0b, 0x1a],
    [0x03, 0xac, 0xf9, 0x02, 0xae, 0x2d],
    [0x01, 0x77, 0x79, 0x6b, 0x0c, 0x67],
    [0xa4, 0xb4, 0x1e, 0xd7, 0xaa, 0x51],
    [0xd6, 0xe1, 0xbc, 0x27, 0x15, 0x25],
    [0x17, 0x17, 0x47, 0x65, 0x40, 0x8b],
    [0xb8, 0x19, 0xdb, 0x4e, 0x17, 0x74],
    [0xaa, 0x63, 0xac, 0x37, 0xa0, 0x8f],
    [0x77, 0xcd, 0x5d, 0x23, 0xef, 0xb7],
    [0x13, 0x2b, 0x83, 0xbf, 0x0f, 0x8c],
    [0xb1, 0x0b, 0xc8, 0x6f, 0x39, 0x4d],
    [0xa1, 0xa5, 0xfa, 0x2b, 0xc6, 0xe2],
    [0x9c, 0x29, 0xcc, 0x26, 0xe9, 0x2d],
    [0xcd, 0x6f, 0xd2, 0xca, 0xbe, 0x47],
    [0x9b, 0x21, 0xae, 0x3e, 0x31, 0x69],
    [0xe7, 0x0b, 0xe6, 0x6f, 0xcf, 0x91],
    [0x88, 0x59, 0xaf, 0x90, 0xc5, 0x2d],
    [0xae, 0xd2, 0x52, 0xb5, 0x28, 0x98],
    [0x3b, 0x7f, 0x65, 0xed, 0x5e, 0x93],
    [0x30, 0xbf, 0x0a, 0x34, 0xdb, 0x3d],
];

const IVS: [[[[u8; BLOCK_SIZE]; 2]; 25]; 2] = [
    [
        [[0x9e, 0xec, 0x5b, 0x3c, 0x8f, 0xa8, 0x8c, 0x55], [0xb6, 0x21, 0x71, 0x98, 0xa4, 0x47, 0x22, 0x58]],
        [[0xf8, 0xc4, 0xd8, 0x72, 0x54, 0xfc, 0xf9, 0xde], [0x2d, 0x53, 0xdb, 0x32, 0x03, 0x10, 0x5a, 0x18]],
        [[0x89, 0x9f, 0x5c, 0x53, 0x06, 0x7f, 0x44, 0x38], [0x32, 0xce, 0xac, 0xdb, 0x91, 0x44, 0x4e, 0x1e]],
        [[0x29, 0x78, 0x5a, 0xf0, 0xab, 0x00, 0x7f, 0x91], [0xe6, 0xb6, 0xd2, 0xe7, 0xa0, 0x05, 0xc2, 0xf2]],
        [[0x8d, 0x46, 0xa9, 0xbb, 0x52, 0x1b, 0x41, 0xdf], [0xf0, 0x4a, 0xc9, 0x14, 0x27, 0xa9, 0x6b, 0x4a]],
        [[0x91, 0x4b, 0x8a, 0x80, 0xf5, 0xcf, 0xbb, 0x3c], [0xbc, 0xf4, 0xc9, 0xd5, 0x42, 0x7a, 0xfa, 0xb7]],
        [[0xd5, 0x8c, 0x01, 0xc0, 0xfd, 0x1e, 0xaa, 0x57], [0xc1, 0x20, 0x7a, 0x38, 0x2c, 0xb7, 0xcd, 0x14]],
        [[0x55, 0x9f, 0xd1, 0x5b, 0xfb, 0x70, 0xc0, 0x77], [0xa4, 0x15, 0xb3, 0x9f, 0x6b, 0xbb, 0x10, 0x5a]],
        [[0x80, 0x9d, 0x16, 0x54, 0x6b, 0x7c, 0x5f, 0xad], [0x35, 0xcb, 0x92, 0x24, 0x08, 0x11, 0xd9, 0x61]],
        [[0x24, 0xa7, 0x75, 0xbf, 0x4d, 0x7e, 0x70, 0x0c], [0x90, 0xcf, 0x9c, 0x04, 0xac, 0x53, 0x89, 0xef]],
        [[0x99, 0x22, 0xf6, 0x89, 0x10, 0xe6, 0x72, 0x23], [0x0a, 0x5c, 0xa5, 0xff, 0x9c, 0x78, 0xda, 0x7f]],
        [[0xdf, 0xff, 0xbb, 0x11, 0x6b, 0x75, 0xf0, 0x29], [0xa5, 0x86, 0xd0, 0x53, 0x77, 0xe7, 0xb1, 0x0d]],
        [[0x4c, 0x06, 0xda, 0x55, 0x4e, 0x50, 0x1b, 0x7a], [0x1c, 0x90, 0xce, 0x64, 0xd6, 0x17, 0x52, 0xfb]],
        [[0x00, 0x26, 0x75, 0x25, 0xcd, 0x95, 0x15, 0x0f], [0x13, 0xd8, 0xab, 0x30, 0xf1, 0xc5, 0xc5, 0xfa]],
        [[0x0c, 0x8e, 0x86, 0x1e, 0x3f, 0xcb, 0x8b, 0xd1], [0xec, 0xce, 0xa9, 0x96, 0x91, 0x11, 0xb4, 0x97]],
        [[0x1e, 0x65, 0x5f, 0xa4, 0x55, 0xeb, 0xec, 0xcf], [0x19, 0xd9, 0x9f, 0xe0, 0x5e, 0x57, 0x45, 0x73]],
        [[0x0e, 0x2d, 0x18, 0xe1, 0x55, 0x05, 0x04, 0xbf], [0x5e, 0x81, 0x1f, 0xdd, 0xff, 0x5c, 0xc3, 0xf4]],
        [[0xf2, 0x06, 0x56, 0x54, 0x4d, 0xfb, 0x96, 0x54], [0x33, 0x97, 0x07, 0x43, 0x4f, 0x39, 0xc4, 0xa8]],
        [[0x5e, 0x02, 0x37, 0x17, 0x7b, 0x64, 0xe6, 0xa2], [0x2e, 0x24, 0x13, 0x07, 0xfe, 0xa1, 0x88, 0xb7]],
        [[0x60, 0xdd, 0x4c, 0xe0, 0xa1, 0xdc, 0xba, 0x6c], [0x81, 0x5c, 0x3f, 0x93, 0x7a, 0x1f, 0x2a, 0x1c]],
        [[0xae, 0x5c, 0xbe, 0x9d, 0x84, 0x6f, 0xcb, 0x51], [0x4d, 0x13, 0xc6, 0x81, 0x28, 0xc3, 0x03, 0x34]],
        [[0xb0, 0x5d, 0xcb, 0x8d, 0x69, 0x1c, 0xde, 0x29], [0x31, 0xf1, 0x22, 0xc3, 0x1c, 0x82, 0x8a, 0x57]],
        [[0x08, 0x32, 0x8b, 0xa2, 0x1e, 0x12, 0xc9, 0xb9], [0xcd, 0xa8, 0xe6, 0x1c, 0x59, 0xac, 0x0c, 0xf6]],
        [[0xa5, 0x3b, 0xe4, 0x64, 0x2f, 0x45, 0x33, 0xa2], [0x4a, 0xda, 0x39, 0xe2, 0x0e, 0x94, 0xf2, 0xaa]],
        [[0xb0, 0x82, 0xb7, 0x33, 0xd2, 0x6f, 0xc0, 0x00], [0xd7, 0x8d, 0x1f, 0x8e, 0x79, 0x85, 0x3e, 0x2a]]
    ],
    [
        [[0xd2, 0xb7, 0xf6, 0x9c, 0xcf, 0x06, 0xe8, 0xc1], [0xae, 0xeb, 0x7f, 0xe9, 0x87, 0x28, 0x1c, 0x9b]],
        [[0xe8, 0x8c, 0x2a, 0x97, 0xd1, 0xd2, 0xa6, 0x76], [0xad, 0x23, 0x69, 0xa0, 0xef, 0x1f, 0x8c, 0xba]],
        [[0x24, 0x62, 0x40, 0x0b, 0x21, 0xc6, 0x07, 0x89], [0xba, 0x60, 0x9e, 0x26, 0x98, 0x18, 0xaf, 0x01]],
        [[0xdf, 0x2b, 0x56, 0xc9, 0xb3, 0x72, 0x35, 0x8d], [0x1d, 0x4f, 0x61, 0xaf, 0x53, 0x12, 0x6e, 0x49]],
        [[0x1c, 0x87, 0x6c, 0xb1, 0xd4, 0x1b, 0xa2, 0xb2], [0xd4, 0xa1, 0x2c, 0xe2, 0x2f, 0xe9, 0xa4, 0x62]],
        [[0x17, 0x83, 0x1c, 0x68, 0xb3, 0xd6, 0x65, 0x2d], [0x81, 0x5b, 0x4d, 0x9b, 0x15, 0x6f, 0x0b, 0xdf]],
        [[0xce, 0x91, 0xb9, 0x8a, 0x61, 0x20, 0xb1, 0xf9], [0xca, 0x0a, 0xc4, 0x76, 0x5b, 0x4b, 0xab, 0x16]],
        [[0x5b, 0xd2, 0x4a, 0xfd, 0x44, 0xb7, 0xdf, 0x1f], [0x8b, 0x6f, 0xab, 0x0c, 0xab, 0x3d, 0x0c, 0x7a]],
        [[0x35, 0x6c, 0xbd, 0xff, 0x62, 0x53, 0x77, 0x44], [0xf2, 0x44, 0x5f, 0x8c, 0x59, 0x25, 0x5f, 0x6b]],
        [[0xb5, 0x27, 0x0d, 0xd2, 0x23, 0xbe, 0x40, 0xb3], [0x3e, 0x8b, 0x92, 0xb1, 0x78, 0x57, 0xcb, 0xb0]],
        [[0xb3, 0xb4, 0xb6, 0xd5, 0xb6, 0xa7, 0x66, 0x6e], [0xfb, 0xa7, 0x32, 0x93, 0xee, 0x79, 0x61, 0x45]],
        [[0x49, 0xd7, 0x93, 0x34, 0x90, 0x1a, 0xad, 0x2c], [0x84, 0x3e, 0xe9, 0x0b, 0x2c, 0xc6, 0xb3, 0xb1]],
        [[0x82, 0xfb, 0x86, 0xec, 0xa8, 0x76, 0x55, 0x98], [0x7e, 0xe3, 0xa2, 0x47, 0xb6, 0x72, 0x05, 0x61]],
        [[0x0b, 0xa5, 0x72, 0x17, 0xcb, 0x18, 0xae, 0x03], [0x8c, 0x61, 0x32, 0xd9, 0x2b, 0x42, 0xef, 0xf2]],
        [[0x3f, 0x0a, 0x06, 0x82, 0x09, 0xc9, 0x76, 0xf2], [0x3d, 0x54, 0x50, 0xfd, 0x25, 0xa2, 0x2f, 0x2e]],
        [[0xf1, 0x34, 0x64, 0x94, 0xdc, 0x90, 0x58, 0x5d], [0x1e, 0x6f, 0xb4, 0xef, 0x73, 0xe8, 0xb0, 0xed]],
        [[0xc0, 0xd2, 0xe1, 0x42, 0xec, 0x04, 0x69, 0xa8], [0x27, 0x9c, 0x7c, 0x79, 0x87, 0x9a, 0xb2, 0x48]],
        [[0x50, 0x73, 0xec, 0x1e, 0x4d, 0xd0, 0x80, 0x51], [0x46, 0x21, 0xc9, 0xf8, 0x93, 0xcc, 0xe8, 0x41]],
        [[0x70, 0xc9, 0xe4, 0x78, 0x8f, 0x6b, 0x2c, 0x27], [0x4c, 0x7e, 0x2c, 0x5a, 0x15, 0x69, 0x64, 0xdd]],
        [[0x00, 0xc7, 0x09, 0xcd, 0xf6, 0x2d, 0x2d, 0x31], [0x6f, 0x01, 0x01, 0x3e, 0xcd, 0x60, 0x16, 0xb4]],
        [[0xe7, 0xe8, 0x76, 0xc4, 0x50, 0x4f, 0x08, 0x5b], [0x62, 0x28, 0x24, 0x42, 0x7d, 0x9a, 0x19, 0x26]],
        [[0x2f, 0xd4, 0x67, 0xb9, 0x24, 0x0c, 0xbb, 0x14], [0x7d, 0x19, 0xc8, 0x73, 0x79, 0xa7, 0x70, 0xcf]],
        [[0x2d, 0x53, 0xdc, 0x91, 0x83, 0xf2, 0x0c, 0x12], [0x3b, 0xaf, 0x1b, 0x6b, 0x02, 0x99, 0x8b, 0x61]],
        [[0xe3, 0x2c, 0xa2, 0x54, 0xcd, 0x51, 0xaf, 0xe5], [0x18, 0x58, 0x11, 0x7f, 0xf0, 0x50, 0x9c, 0x15]],
        [[0x6e, 0x26, 0x01, 0xe9, 0xdb, 0x50, 0x13, 0xea], [0x22, 0x59, 0x30, 0x3b, 0xe4, 0x5f, 0x43, 0x1e]]
    ]
];

static BLOWFISH_INIT: OnceCell<Blowfish> = OnceCell::new();

#[derive(Clone)]
pub struct BlowfishPass {
    blowfish: Blowfish,
    total_written: usize,
    iv_index: usize,
    block: [u8; BLOCK_SIZE],
    block_offset: usize,
}

impl BlowfishPass {
    pub fn new() -> BlowfishPass {
        let blowfish = BLOWFISH_INIT
            .get_or_init(|| {
                let mut blowfish = Blowfish::new();
                for k in BLOWFISH_KEYS.iter() {
                    blowfish.expand_key(k);
                }
                blowfish
            })
            .clone();

        let iv_index = 1;
        let block = IVS[0][iv_index][0];

        Self {
            blowfish,
            total_written: 0,
            iv_index,
            block,
            block_offset: 8,
        }
    }

    pub fn crypt(&mut self, data: &mut [u8]) {
        for x in data.iter_mut() {
            if self.total_written >= SUPER_BLOCK_SIZE {
                self.iv_index = (self.iv_index + 3) % 11;
                self.block = IVS[1][self.iv_index][0];
                self.total_written = 0;
            } else if self.block_offset >= BLOCK_SIZE {
                let mut b = [0u32; 2];
                Endian::read_u32_into(&self.block, &mut b);
                b = self.blowfish.encrypt(b);
                Endian::write_u32_into(&b, &mut self.block);
            }

            self.block[self.block_offset] ^= *x;
            *x = self.block[self.block_offset];
            self.block_offset += 1;
            self.total_written += 1;
        }
    }
}
